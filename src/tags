!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/michael/MINISHELL/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/a130f268/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
deal_with_other	mini_tokenable.c	/^int	deal_with_other(t_minish *minish, int type, int i)$/;"	f	typeref:typename:int
deal_with_pipes	mini_tokenable.c	/^int	deal_with_pipes(t_minish *minish, int i)$/;"	f	typeref:typename:int
deal_with_redir	mini_tokenable.c	/^int	deal_with_redir(t_minish *minish, int type, int i)$/;"	f	typeref:typename:int
ft_checkenv	ppx_checks.c	/^char	**ft_checkenv(char *env[])$/;"	f	typeref:typename:char **
ft_checkexe	ppx_checks.c	/^char	*ft_checkexe(char **paths, char *cmd)$/;"	f	typeref:typename:char *
ft_checkheredoc	ppx_hd.c	/^void	ft_checkheredoc(char **av, t_pipex *ppx)$/;"	f	typeref:typename:void
ft_checkpath	ppx_checks.c	/^char	*ft_checkpath(char *env[], char *cmd)$/;"	f	typeref:typename:char *
ft_close_fds	ppx_free.c	/^void	ft_close_fds(t_pipex *ppx)$/;"	f	typeref:typename:void
ft_copy_env	mini_utils.c	/^char	**ft_copy_env(char *env[])$/;"	f	typeref:typename:char **
ft_dup	ppx_utils.c	/^void	ft_dup(int in, int out)$/;"	f	typeref:typename:void
ft_error	ppx_utils.c	/^int	ft_error(char *error, int errn)$/;"	f	typeref:typename:int
ft_feedppx	ppx_main.c	/^int	ft_feedppx(t_pipex *ppx, char **av, char **env)$/;"	f	typeref:typename:int
ft_free	ppx_free.c	/^void	ft_free(char **av)$/;"	f	typeref:typename:void
ft_freeall	ppx_free.c	/^void	ft_freeall(t_pipex *ppx)$/;"	f	typeref:typename:void
ft_gc	mini_gc.c	/^void	ft_gc(void *garb, int status)$/;"	f	typeref:typename:void
ft_heredoc	ppx_hd.c	/^int	ft_heredoc(t_pipex *ppx)$/;"	f	typeref:typename:int
ft_initppx	ppx_main.c	/^int	ft_initppx(t_pipex *ppx, int ac, char *av[], char **env)$/;"	f	typeref:typename:int
ft_looppid	ppx_main.c	/^void	ft_looppid(t_pipex *ppx, char **env, int idx)$/;"	f	typeref:typename:void
ft_signals	mini_sig.c	/^void	ft_signals(void)$/;"	f	typeref:typename:void
ft_stralnum	ppx_utils.c	/^int	ft_stralnum(char *str)$/;"	f	typeref:typename:int
ft_token	mini_main.c	/^int	ft_token(t_minish *minish)$/;"	f	typeref:typename:int
ft_waitnclose	ppx_free.c	/^int	ft_waitnclose(t_pipex *ppx)$/;"	f	typeref:typename:int
gc_free	mini_gc.c	/^void	gc_free(void *ptr)$/;"	f	typeref:typename:void
gc_lstclear	mini_gc.c	/^void	gc_lstclear(t_list **lst, void (*del)(void*))$/;"	f	typeref:typename:void
gc_lstdelone	mini_gc.c	/^void	gc_lstdelone(t_list *lst, void (*del)(void*))$/;"	f	typeref:typename:void
gc_malloc	mini_gc.c	/^void	*gc_malloc(size_t size)$/;"	f	typeref:typename:void *
is_not_tokenable	mini_not_tokenable.c	/^int	is_not_tokenable(t_minish *minish, int i, const char *tok[])$/;"	f	typeref:typename:int
is_tokenable	mini_tokenable.c	/^int	is_tokenable(t_minish *minish, int i, const char *tok[])$/;"	f	typeref:typename:int
main	mini_main.c	/^int	main(int ac, char *av[], char *env[])$/;"	f	typeref:typename:int
main_pipe	ppx_main.c	/^int	main_pipe(int ac, char *argv[], char *env[])$/;"	f	typeref:typename:int
not_token_size	mini_not_tokenable.c	/^int	not_token_size(t_minish *minish, int i, const char *tok[])$/;"	f	typeref:typename:int
print_lst_line	mini_main.c	/^void	print_lst_line(t_minish minish)$/;"	f	typeref:typename:void
re_prompt	mini_sig.c	/^void	re_prompt(int useless)$/;"	f	typeref:typename:void
search_quotes	mini_tokenable.c	/^int	search_quotes(t_minish *minish, int type, int i)$/;"	f	typeref:typename:int
set_act_int	mini_sig.c	/^void	set_act_int(struct sigaction *act_int)$/;"	f	typeref:typename:void
set_act_quit	mini_sig.c	/^void	set_act_quit(struct sigaction *act_quit)$/;"	f	typeref:typename:void
